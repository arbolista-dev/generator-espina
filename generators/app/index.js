'use strict';
var yeoman = require('yeoman-generator');
var chalk = require('chalk');
var yosay = require('yosay');
const path = require('path');
const fs = require('fs');
var prompts = require('./prompts');
const config = require('../../utils/config');

const baseRootPath = path.join(path.dirname(require.resolve('react-webpack-template')), '..');

module.exports = yeoman.Base.extend({
  prompting: function () {
    // Have Yeoman greet the user.
    this.log(yosay(
      'Welcome to the ' + chalk.red('generator-espina') + ' generator!'
    ));

    return this.prompt(prompts).then(function (props) {
      // To access props later use this.props.someAnswer;
      this.props = props;
    }.bind(this));
  },

  configuring() {
    let defaultSettings = this.fs.readJSON(`${baseRootPath}/generators/app/templates/package.json`);
    let packageSettings = {
      name: this.props.appName,
      private: true,
      version: '0.0.1',
      description: `${this.props.description} - Generated by generator-espina`,
      scripts: defaultSettings.scripts,
      repository: '',
      keywords: [],
      author: this.props.authorName,
      devDependencies: defaultSettings.devDependencies,
      dependencies: defaultSettings.dependencies
    };

     // Add needed loaders if we have special styles
    let templateConfig = config.getChoiceByKey('template', this.props.template);
    if(templateConfig && templateConfig.packages) {

      for(let dependency of templateConfig.packages) {
        packageSettings.dependencies[dependency.name] = dependency.version;
      }
    }

    this.fs.writeJSON(this.destinationPath('package.json'), packageSettings);

  }


  writing: function () {
    let templateConfig = config.getChoiceByKey('template', this.props.template);

    this.fs.readdir(this.sourceRoot(), (err, items) => {
      for(let item of items) {
        if(templateConfig.suffixExclude.indexOf(item) !== -1) {
          continue;
        }
        // Copy all items to our root
        let fullPath = path.join(baseRootPath, item);
        if(fs.lstatSync(fullPath).isDirectory()) {
          this.bulkDirectory(item, item);
        } else {
          if (item === '.npmignore') {
            this.copy(item, '.gitignore');
          } else {
            this.copy(item, item);
          }
        }
      }
    });
  },

  install: function () {
    this.installDependencies();
  }
});

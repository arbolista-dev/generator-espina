'use strict';
var yeoman = require('yeoman-generator');
var chalk = require('chalk');
var yosay = require('yosay');
const path = require('path');
const fs = require('fs');
var prompts = require('./prompts');
const config = require('../../utils/config');

const copyFiles = (scope, basepath, relativepath, exclusions) => {
  fs.readdir(basepath, (err, items) => {
    if ( err ) {
      return;
    }
    for ( let item of items ) {
      let exclude = exclusions.find((suffix)=>{
        return (item.indexOf(suffix) === item.length - suffix.length && item.indexOf(suffix)  !== -1) || item.indexOf("package.json") !==-1;
      });
      if( exclude ){
        //console.log("Excluido",item);
        continue;
      }
      // Copy all items to our root
      //console.log(item);
      let fullPath = scope.templatePath(path.join(relativepath, item));

      if (fs.lstatSync(fullPath).isDirectory()) {
        copyFiles(scope,fullPath,path.join(relativepath, item), exclusions);
      } else {
        if ( item === '.npmignore' ) {
          //scope.copy(path.join(relativepath,item), '.gitignore');
          scope.fs.copy(fullPath, scope.destinationPath(path.join(relativepath, ".gitignore")));
        } else if ( item.indexOf(".ejs") > 0 ){
          scope.fs.copy(fullPath, scope.destinationPath(path.join(relativepath, item)));
        } else {
          scope.fs.copyTpl(fullPath, scope.destinationPath(path.join(relativepath, item)),{
            template:scope.props.template
          });
          //scope.copy(path.join(relativepath,item), path.join(relativepath,item));
        }
      }
    }
  });
};

module.exports = yeoman.Base.extend({
  prompting: function () {
    // Have Yeoman greet the user.
    this.log(yosay(
      'Welcome to the ' + chalk.red('generator-espina') + ' generator!'
    ));

    return this.prompt(prompts).then(function (props) {
      // To access props later use this.props.someAnswer;
      this.props = props;
    }.bind(this));
  },

  configuring() {

    let defaultSettings = this.fs.readJSON(this.templatePath("package.json"));
    let packageSettings = {
      name: this.props.appName,
      private: true,
      version: '0.0.1',
      description: `${this.props.description} - Generated by generator-espina`,
      scripts: defaultSettings.scripts,
      repository: '',
      keywords: [],
      author: this.props.authorName,
      devDependencies: defaultSettings.devDependencies,
      dependencies: defaultSettings.dependencies
    };

     // Add needed loaders if we have special styles
    let templateConfig = config.getChoiceByKey('template', this.props.template);
    if(templateConfig && templateConfig.packages) {

      for(let dependency of templateConfig.packages) {
        packageSettings.dependencies[dependency.name] = dependency.version;
      }
    }

    this.fs.writeJSON(this.destinationPath('package.json'), packageSettings);

  },

  writing() {
    var templateConfig = config.getChoiceByKey('template', this.props.template);
    //console.log(this.sourceRoot());
    //console.log("===========")
    copyFiles(this,this.sourceRoot(), "", templateConfig.suffixExclude);
  },

  install: function () {
    //this.installDependencies();
  }
});
